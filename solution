package com.company;

import java.util.ArrayList;
import java.util.LinkedList;

public class Main {

    public static void main(String[] args) {
	// write your code here
    }
}

class PriorityQueue<T extends Comparable>{
    ArrayList<T> list= new ArrayList<>();

    public void heapify(){
        for (int i = 0; i <list.size()/2 ; i++) {
            checkChildren(i);
        }
    }

    public void checkChildren(int i){
        int comp = list.get(i*2+1).compareTo(list.get(i*2+2))
        int index = comp>0? i*2+1:i*2+2;
        if(list.get(i).compareTo(list.get(index))<0){
            swap(list,i,index);
            checkChildren((i-1)/2);
        }
    }

    public T getRoot(){
        swap(list,0,list.size()-1);
        T temp = list.get(list.size()-1);
        list.remove(temp);
        heapify();
        return temp;
    }

    public void add(T key){
        list.add(key);
        if(list.size()!=1) {
            checkChildren((list.size() - 1) / 2);
        }
    }

    public void swap(ArrayList<T> array, int index1, int index2){
        T temp = array.get(index1);
        array.set(index1,array.get(index2));
        array.set(index2,temp);
    }

}

class Node implements Comparable<Node>{
    int verticalArrayIndex;
    int horizontalArrayIndex;
    int value;
    long cost = Long.MAX_VALUE;
    boolean visited =false;
    int zeros;
    int excessiveFives;
    int excessiveTwos;
    int excessiveFivesCost;
    int excessiveTwosCost;

    public Node(int verticalArrayIndex, int horizontalArrayIndex, int value) {
        this.verticalArrayIndex = verticalArrayIndex;
        this.horizontalArrayIndex = horizontalArrayIndex;
        this.value = value;
        calculateValue(value);
    }

    public boolean calculateCost(Node node){
        if(node.visited){
            return false;
        }
        long cost = node.cost+zeros;
        if(node.excessiveTwosCost<=excessiveFives){
            cost += node.excessiveTwosCost;
            int excessiveFivesCost = excessiveFives-node.excessiveTwosCost;
        }else {
            cost += node.excessiveFives;
            int excessiveTwosCost = -excessiveFives+node.excessiveTwosCost;
        }
        if(node.excessiveFivesCost<=excessiveTwos){
            cost += node.excessiveFivesCost;
            int excessiveTwosCost = excessiveTwos-node.excessiveFivesCost;
        }else {
            cost += node.excessiveTwos;
            int excessiveFivesCost = -excessiveTwos+node.excessiveFivesCost;
        }
        if (cost<this.cost) {
            this.cost = cost;
            this.excessiveFivesCost = excessiveFivesCost;
            this.excessiveTwosCost = excessiveTwosCost;
            return true;
        }
        if(cost == this.cost){
            if(this.excessiveFivesCost+this.excessiveTwosCost>excessiveFivesCost+excessiveTwosCost){
                this.excessiveTwosCost = excessiveTwosCost;
                this.excessiveFivesCost = excessiveFivesCost;
            }
            return true;
        }
        return false;
    }

    public void calculateValue(int value){
        while(value%5 == 0){
            value = value/5;
            excessiveFives++;
        }
        while(value%2 == 0) {
            value = value / 2;
            excessiveTwos++;
        }
        if(excessiveTwos>excessiveFives){
            excessiveTwos -= excessiveFives;
            zeros = excessiveFives;
            excessiveFives = 0;
        }else {
            excessiveFives-= excessiveTwos;
            zeros = excessiveTwos;
            excessiveTwos= 0;
        }
    }

    @Override
    public int compareTo(Node o) {
        if (this.cost>o.cost) return 1;
        else if(this.cost==o.cost) {
            if(o.excessiveFivesCost+o.excessiveTwosCost>excessiveFivesCost+excessiveTwosCost){
                return -1;
            }if(o.excessiveFivesCost+o.excessiveTwosCost<excessiveFivesCost+excessiveTwosCost) {
                return 1;
            }else return 0;
        }
        else return -1;
    }
}

class Graph{
    LinkedList<Node>[] list;
    Node[][] array;
    int verticalSize;
    int horizontalSize;
    PriorityQueue<Node> queue = new PriorityQueue<>();

    public Graph(LinkedList<Node>[] list, int[][] array) {
        this.array = new Node[array.length][array.length];
        this.list = list;
        for (int i = 0; i <array.length ; i++) {
            for (int j = 0; j <array.length ; j++) {
                queue.add(new Node(j,i,array[i][j]));
                this.array[i][j] = new Node(j,i,array[i][j]);
            }
        }
        verticalSize = array.length;
        horizontalSize = array[0].length;
    }

    public void dijkstra(){
        Node initValue = array[0][0];


    }

    public void checkNeighbours(int horizontalIndex, int verticalIndex){
        Node node = array[horizontalIndex][verticalIndex];
        if(horizontalIndex!=0){
            if(node.calculateCost(array[horizontalIndex-1][verticalIndex])){
                queue.heapify();
            }
        }if(horizontalIndex!=array.length-1){
            if(node.calculateCost(array[horizontalIndex+1][verticalIndex])){
                queue.heapify();
            }
        }if(verticalIndex!=0){
            if(node.calculateCost(array[horizontalIndex][verticalIndex-1])){
                queue.heapify();
            }
        }if(horizontalIndex!=array[0].length-1){
            if(node.calculateCost(array[horizontalIndex][verticalIndex+1])){
                queue.heapify();
            }
        }
        node.visited = true;
    }
}
